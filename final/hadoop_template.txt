public static class InitialMapper extends Mapper<LongWritable, Text, Text, DateTypeValue>{
		@Override
		public void setup(Context context){
			
			FileSplit fileSplit = (FileSplit) context.getInputSplit();
			String filename = fileSplit.getPath().toString();
			
			if(filename.contains("")){
				
			}
			
		}
		
		@Override
		public void map(LongWritable byteOffset, Text line, Context context) throws IOException, InterruptedException{
			
		}
	}
	
	public static class InitialReducer extends Reducer<Text, DateTypeValue, DoubleWritable, Text>{
		
		private HashMap<Long, Point> dateMap = null;
		private Collection<Point> goodPoints = null;
		private MultipleOutputs<DoubleWritable, Text> mos;
		
		@Override
		public void setup(Context context){
			mos = new MultipleOutputs<DoubleWritable, Text>(context);
		}
		
		
		// We must align the dates
		@Override
		public void reduce(Text key, Iterable<DateTypeValue> values, Context context) throws IOException, InterruptedException{
			mos.write(new DoubleWritable(goodPoints.size()), new Text(p.x+"\t"+p.y), "scatter_"+key.toString());
		}
		
		public void cleanup(Context context) throws IOException, InterruptedException {
			mos.close();
		}
	}
	
		public static void main(String[] args) throws Exception{

		Configuration conf = new Configuration();
	    FileSystem fs = FileSystem.get(conf);
		
		GenericOptionsParser gop = new GenericOptionsParser(args);
		String[] options = gop.getRemainingArgs();
		
		Job job1 = new Job(new Configuration());
		job1.setJarByClass(App.class);
		
		// Binary FTW
		//correlationJob.setOutputFormatClass(SequenceFileOutputFormat.class);
		
		job1.setMapperClass(InitialMapper.class);
        job1.setReducerClass(InitialReducer.class);
        
        job1.setJobName("Find movies matching user");
        
        //LazyOutputFormat.setOutputFormatClass(job1, TextOutputFormat.class);
        
        job1.setMapOutputKeyClass(Text.class);
        job1.setMapOutputValueClass(MovieRatingSimilarity.class);
		
        //job1.setOutputKeyClass(DoubleWritable.class);
        //job1.setOutputValueClass(Text.class);
        
        // Input
        FileInputFormat.addInputPath(job1, new Path(options[0]));
        
        Path outputPath = new Path(options[1]);
		if(fs.exists(outputPath)){
	    	fs.delete(outputPath,true);
	    }
		//fs.deleteOnExit(outputPath);
		
        FileOutputFormat.setOutputPath(job1, outputPath);
        
        System.exit(job1.waitForCompletion(true) ? 1 : 0);
        }